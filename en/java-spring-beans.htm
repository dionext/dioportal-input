<html xmlns="http://www.w3.org/1999/xhtml" xmlns:og="http://ogp.me/ns#" lang="en"> 
    <head>
        <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /> 
        <meta charset="utf-8" /> 
        <meta http-equiv="Content-Language" content="en" />
        <title>Spring: Beans, Components, Services</title>
        <meta name="description" content="" />
        <meta name="keywords" content="" />
    </head>
    <body> 
        <h1>Spring: Beans, Components, Services </h1> 
        <div> 
            <ul class="list-unstyled" id="TOC"> 
                <li><a href="#id0">Component declaration</a></li> 
                <li><a href="#id1">Bean declaration</a></li> 
                <li><a href="#id2">Bean scopes</a></li> 
                <li><a href="#id40">&#xa0;&#xa0;&#xa0;&#xa0;@Bean vs @Component</a></li> 
                <li><a href="#id3">&#xa0;&#xa0;&#xa0;&#xa0;@Configuration</a></li> 
                <li><a href="#id4">&#xa0;&#xa0;&#xa0;&#xa0;@ComponentScan</a></li> 
                <li><a href="#id44">&#xa0;&#xa0;&#xa0;&#xa0;@Component @Repository, @Service и @Controller</a></li> 
                <li><a href="#id45">&#xa0;&#xa0;&#xa0;&#xa0;Pre and Post Events</a></li> 
                <li><a href="#id46">&#xa0;&#xa0;&#xa0;&#xa0;Bean access</a></li> 
                <li><a href="#id5">&#xa0;&#xa0;&#xa0;&#xa0;Autowiring</a></li> 
            </ul>
        </div> 
        <h2><a name="id0"></a>Component declaration</h2> 
        <p>Simple annotation </p> 
        <pre><code class="language-java">@Component
public class PageInfo
{
}</code></pre> 
        <p>Annotation with specified scope</p> 
        <pre><code class="language-java">@Component
@RequestScope
public class PageInfo
{
}</code></pre> 
        <h2><a name="id1"></a>Bean declaration</h2> 
        <p>To declare a Bean object, it is enough to specify the @Bean annotation to the method that returns the bean type both in classes with the @Configuration annotation and in classes with the @Component annotation (or its descendants).</p> 
        <pre><code class="language-java">@Configuration 
public class LessonsConfiguration 
{ 
	@Bean
	GreetingService greetingService() {
		return new GreetingServiceImpl(); 
	} 
}
</code></pre> 
        <p>Named beans</p> 
        <pre><code class="language-java">@Bean(name = "gServiceName")
@Bean(name = {"gServiceName", "gServiceAnotherNamed"})
</code></pre> 
        <h2><a name="id2"></a>Bean scopes</h2> 
        <p> <a href="https://docs.spring.io/spring-framework/reference/core/beans/factory-scopes.html" rel="nofollow" target="_blank" class="external">https://docs.spring.io/spring-framework/reference/core/beans/factory-scopes.html</a> </p> 
        <p> 
            <table id="beans-factory-scopes-tbl"> 
                <thead> 
                    <tr> 
                        <th>Scope</th> 
                        <th>Description</th> 
                    </tr> 
                </thead> 
                <tr> 
                    <td> <p> <a href="https://docs.spring.io/spring-framework/reference/core/beans/factory-scopes.html#beans-factory-scopes-singleton" rel="nofollow" target="_blank" class="external"> singleton</a></p> </td> 
                    <td> <p>(Default) Scopes a single bean definition to a single object instance for each Spring IoC container.</p> </td> 
                </tr> 
                <tr> 
                    <td> <p> <a href="https://docs.spring.io/spring-framework/reference/core/beans/factory-scopes.html#beans-factory-scopes-prototype" rel="nofollow" target="_blank" class="external"> prototype</a></p> </td> 
                    <td> <p>Scopes a single bean definition to any number of object instances.</p> </td> 
                </tr> 
                <tr> 
                    <td> <p> <a href="https://docs.spring.io/spring-framework/reference/core/beans/factory-scopes.html#beans-factory-scopes-request" rel="nofollow" target="_blank" class="external"> request</a></p> </td> 
                    <td> <p>Scopes a single bean definition to the lifecycle of a single HTTP request. That is, each HTTP request has its own instance of a bean created off the back of a single bean definition. Only valid in the context of a web-aware Spring<span>&#xa0;</span>ApplicationContext.</p> </td> 
                </tr> 
                <tr> 
                    <td> <p> <a href="https://docs.spring.io/spring-framework/reference/core/beans/factory-scopes.html#beans-factory-scopes-session" rel="nofollow" target="_blank" class="external"> session</a></p> </td> 
                    <td> <p>Scopes a single bean definition to the lifecycle of an HTTP<span>&#xa0;</span>Session. Only valid in the context of a web-aware Spring<span>&#xa0;</span>ApplicationContext.</p> </td> 
                </tr> 
                <tr> 
                    <td> <p> <a href="https://docs.spring.io/spring-framework/reference/core/beans/factory-scopes.html#beans-factory-scopes-application" rel="nofollow" target="_blank" class="external"> application</a></p> </td> 
                    <td> <p>Scopes a single bean definition to the lifecycle of a<span>&#xa0;</span>ServletContext. Only valid in the context of a web-aware Spring<span>&#xa0;</span>ApplicationContext.</p> </td> 
                </tr> 
                <tr> 
                    <td> <p> <a href="https://docs.spring.io/spring-framework/reference/web/websocket/stomp/scope.html" rel="nofollow" target="_blank" class="external"> websocket</a></p> </td> 
                    <td> <p>Scopes a single bean definition to the lifecycle of a<span>&#xa0;</span>WebSocket. Only valid in the context of a web-aware Spring<span>&#xa0;</span>ApplicationContext.</p> </td> 
                </tr> 
            </table> </p> 
        <h3><a name="id40"></a>@Bean vs @Component</h3> 
        <p>@Component is a class level annotation whereas @Bean is a method level annotation and name of the method serves as the bean name </p> 
        <p>We cannot create a bean of a class using @Component, if the class is outside spring container whereas we can create a bean of a class using @Bean even if the class is present outside the spring container. By using the @Bean annotation, you can wrap a third-party class (it may not have @Component and it may not use Spring), as a Spring bean. </p> 
        <p> <a href="https://stackoverflow.com/questions/10604298/spring-component-versus-bean" rel="nofollow" target="_blank" class="external"> https://stackoverflow.com/questions/10604298/spring-component-versus-bean</a> </p> 
        <p>&#xa0;</p> 
        <h3><a name="id3"></a>@Configuration</h3> 
        <p>@Configuration is a class-level annotation indicating that an object is a source of bean definitions. @Configuration classes declare beans through @Bean-annotated methods. Calls to @Bean methods on @Configuration classes can also be used to define inter-bean dependencies. </p> 
        <h3><a name="id4"></a>@ComponentScan</h3>
		<p><strong>Official documentation states: We generally recommend that 
		you locate your main application class in a root package above other 
		classes. </strong></p>
        <p>So that your configuration can know about such components and you can use them, there is a special annotation for your configuration class @ComponentScan. By default, this configuration scans for classes with the @Component annotation and its descendants in the package in which it is located, as well as in subpackages. </p>
		<p>However, if you want the scan to be for specific directories, then this can be configured by simply adding the basePackages parameter to the @ComponentScan annotation, indicating one or more packages. It will look something like this: @ComponentScan(basePackages = "lessons.services")</p>
		<p>@ComponentScan without arguments tells Spring to scan the current 
		package and all of its sub-packages. </p>
		<p>You can use aproach as in example: (
		<a href="https://stackoverflow.com/questions/55750957/why-is-this-componentscan-not-working-in-my-spring-boot-application">
		https://stackoverflow.com/questions/55750957/why-is-this-componentscan-not-working-in-my-spring-boot-application</a>&nbsp; 
		)</p>
		<div style="background-color:#ffffff;color:#080808">
			<pre style="font-family:'JetBrains Mono',monospace;font-size:10,5pt;"><span style="color:#9e880d;">@ComponentScan
@ComponentScan</span>(basePackages = {<span style="color:#067d17;">"com.dionext"</span>})
<span style="color:#9e880d;">@EnableJpaRepositories</span>(basePackages = <span style="color:#067d17;">"com.dionext"</span>)
<span style="color:#9e880d;">@EntityScan</span>(basePackages = <span style="color:#067d17;">"com.dionext"</span>)
<span style="color:#0033b3;">public class </span><span style="color:#000000;">ExFrontendDemoApplication </span>{
</pre>
		</div>
        <h3><a name="id44"></a>@Component @Repository, @Service и @Controller</h3> 
        <p> <a href="https://stackoverflow.com/questions/6827752/whats-the-difference-between-component-repository-service-annotations-in" rel="nofollow" target="_blank" class="external"> https://stackoverflow.com/questions/6827752/whats-the-difference-between-component-repository-service-annotations-in</a> </p> 
        <table> 
            <thead> 
                <tr> 
                    <th>Annotation</th> 
                    <th>Meaning</th> 
                </tr> 
            </thead> 
            <tr> 
                <td>@Component</td> 
                <td>generic stereotype for any Spring-managed component</td> 
            </tr> 
            <tr> 
                <td>@Repository</td> 
                <td>stereotype for persistence layer</td> 
            </tr> 
            <tr> 
                <td>@Service</td> 
                <td>stereotype for service layer</td> 
            </tr> 
            <tr> 
                <td>@Controller</td> 
                <td>stereotype for presentation layer (spring-mvc)</td> 
            </tr> 
        </table> &#xa0; 
        <p>In addition to pointing out, that this is an Annotation based Configuration, @Repository’s job is to catch platform specific exceptions and re-throw them as one of Spring’s unified unchecked exception. </p> 
        <p>The dispatcher scans the classes annotated with @Controller and detects methods annotated with @RequestMapping annotations within them. We can use @RequestMapping on/in only those methods whose classes are annotated with @Controller </p> 
        <h3><a name="id45"></a>Pre and Post Events</h3> 
        <p>Use annotation:&#xa0; @PostConstruct<span>&#xa0;and&#xa0;</span>@PreDestroy</p> 
        <h3 id="scopes"><a name="id46"></a>Bean access</h3> 
        <p>Example </p> 
        <pre><code class="language-java">
public class SomeClass { 
	
	private ApplicationContext context; 

	@Autowired 
	public void setContext(ApplicationContext context) { this.context = context; } 
	
	public void someMethod(){
		GreetingService greetingService = context.getBean(GreetingService.class); 
	}
}
</code></pre> 
        <p><a href="https://www.baeldung.com/spring-get-current-applicationcontext" rel="nofollow" target="_blank" class="external"> https://www.baeldung.com/spring-get-current-applicationcontext</a> </p> 
        <h3><a name="id5"></a>Autowiring</h3> 
        <p> <a href="https://docs.spring.io/spring-framework/reference/core/beans/dependencies/factory-collaborators.html#beans-constructor-injection" rel="nofollow" target="_blank" class="external"> https://docs.spring.io/spring-framework/reference/core/beans/dependencies/factory-collaborators.html#beans-constructor-injection</a> </p> 
        <p> Recommended: </p> 
        <p>Constructor-based Dependency Injection </p> 
        <pre><code class="language-java">public class SimpleMovieLister {

	// the SimpleMovieLister has a dependency on a MovieFinder
	private final MovieFinder movieFinder;

	// a constructor so that the Spring container can inject a MovieFinder
	public SimpleMovieLister(MovieFinder movieFinder) {
		this.movieFinder = movieFinder;
	}

	// business logic that actually uses the injected MovieFinder is omitted...
}
</code></pre> Setter-based Dependency Injection 
        <pre><code class="language-java">
public class SimpleMovieLister {

	// the SimpleMovieLister has a dependency on the MovieFinder
	private MovieFinder movieFinder;

	// a setter method so that the Spring container can inject a MovieFinder
	public void setMovieFinder(MovieFinder movieFinder) {
		this.movieFinder = movieFinder;
	}

	// business logic that actually uses the injected MovieFinder is omitted...
}
</code></pre> 
    </body>
</html>